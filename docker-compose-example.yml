version: "3.1"
networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}
    ipam:
      config:
        - subnet: 172.25.0.0/16

## for windows ##
volumes:
  mydata:
    # driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /home/luozhifeng/Documents/web/composed/data/mydata

services:
  # nginx:
  #   image: nginx:1.15-alpine
  #   container_name: lnginx
  #   restart: always
  #   depends_on:
  #     - php
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ${APP_WORKSPACE}:/app
  #     - ./nginx/conf.d:/etc/nginx/conf.d/:ro
  #   networks:
  #     - backend

  tengine:
    # build: ./tengine
    image: elicht/tengine:231v1
    container_name: ltengine
    restart: always
    depends_on:
      - php
    ports:
      - "80:80"
      - "443:443"
    environment:
      TZ: ${TZ}
    volumes:
      - ${APP_WORKSPACE}:/app
      - ./tengine/conf.d:/etc/nginx/conf.d/:ro
    networks:
      backend:
        ipv4_address: 172.25.0.10

  # php:
  #   build:
  #     context: ./php
  #     args:
  #       - INSTALL_XDEBUG=${INSTALL_XDEBUG}
  #   # image: elicht/php:734v2
  #   container_name: lphp
  #   restart: always
  #   links:
  #     - mysql
  #     - mongo
  #     - redis
  #   environment:
  #     TZ: ${TZ}
  #   volumes:
  #     - ${APP_WORKSPACE}:/app
  #     - ./php/php.ini:/usr/local/etc/php/php.ini:ro
  #   networks:
  #     backend:
  #       ipv4_address: 172.25.0.5

  php:
    # build: ./php_tars
    image: elicht/php:73101
    container_name: lphp
    restart: always
    links:
      - mysql
      - mongo
      - redis
    volumes:
      - ${APP_WORKSPACE}:/app
      - ./php_tars/php.ini:/etc/php.ini:ro
      - ${APP_WORKSPACE}tarsData_node:/data
    environment:
      TZ: ${TZ}
      MOUNT_DATA: ${TARS_MOUNT_DATA}
      DBIP: mysql
      DBPort: "3306"
      DBUser: "root"
      DBPassword: ${MYSQL_DB_PASSWORD}
      DBTarsPass: ${MYSQL_TARS_PASSWORD}
    networks:
      backend:
        ipv4_address: 172.25.0.5

  # composer:
  #   image: composer
  #   container_name: lcomposer
  #   working_dir: /app/test
  #   volumes:
  #     - ${APP_WORKSPACE}:/app
  #   networks:
  #     - backend
  #   stdin_open: true
  #   tty: true
  #   # command: composer install --ignore-platform-reqs --no-scripts
  #   command: tail -f /dev/null

  # tars_center:
  #   image: tarscloud/tars:php
  #   container_name: ltars
  #   restart: always
  #   depends_on:
  #     - mysql
  #   volumes:
  #     - ${APP_WORKSPACE}tarsData:/data
  #   environment:
  #     TZ: ${TZ}
  #     MOUNT_DATA: ${TARS_MOUNT_DATA}
  #     DBIP: mysql
  #     DBPort: "3306"
  #     DBUser: "root"
  #     DBPassword: ${MYSQL_DB_PASSWORD}
  #     DBTarsPass: ${MYSQL_TARS_PASSWORD}
  #   links:
  #     - mysql
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     backend:
  #       ipv4_address: 172.25.0.16

  mysql:
    # build: ./mysql
    image: elicht/mysql:57v1
    container_name: lmysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      TZ: ${TZ}
      MYSQL_ROOT_PASSWORD: ${MYSQL_DB_PASSWORD}
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./mysql/conf.d/custom.cnf:/etc/mysql/conf.d/custom.cnf
    networks:
      - backend

  redis:
    # build: ./redis
    image: elicht/redis:50v1
    container_name: lredis
    restart: always
    environment:
      TZ: ${TZ}
    volumes:
      - ./data/redis:/data
    networks:
      - backend
    ports:
      - "6379:6379"

  mongo:
    # build: ./mongo
    image: elicht/mongo:40v1
    container_name: lmongo
    restart: always
    environment:
      TZ: ${TZ}
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      # - ./data/mongo:/data/db
      - mydata:/data/db ## for windows ##
    networks:
      - backend
    ports:
      - "27017:27017"

  node:
    image: node
    container_name: lnode
    restart: always
    working_dir: /app
    environment:
      TZ: ${TZ}
    volumes:
      - ./app:/app
    expose:
      - "8000"
    ports:
      - "8000:80"
    networks:
      - frontend
    stdin_open: true
    tty: true

  beanstalkd:
    # build: ./beanstalkd
    image: beanstalkd:1
    container_name: lbeanstalkd
    restart: always
    environment:
      TZ: ${TZ}
    volumes:
      - ${APP_WORKSPACE}:/app
    expose:
      - "11300"
    networks:
      - backend
